@startuml classes_PocketSage
set namespaceSeparator none
class "Account" as pocketsage.models.account.Account {
  currency : str
  holdings : List['Holding']
  id : Optional[int]
  name : str
  transactions : List['Transaction']
}
class "AmortizationWriter" as pocketsage.services.debts.AmortizationWriter {
  write_schedule() -> None
}
class "AppSetting" as pocketsage.models.settings.AppSetting {
  description : Optional[str]
  key : str
  value : str
}
class "BaseConfig" as pocketsage.config.BaseConfig {
  APP_NAME : str
  DATABASE_URL : NoneType
  DATA_DIR : Path
  DB_FILENAME : str
  SECRET_KEY : NoneType
  SQLCIPHER_FLAG : str
  SQLCIPHER_KEY_ENV : str
  SQLITE_PRAGMAS : dict
  USE_SQLCIPHER : bool
  sqlalchemy_engine_options() -> dict[str, Any]
}
class "Budget" as pocketsage.models.budget.Budget {
  id : Optional[int]
  label : str
  lines : List['BudgetLine']
  period_end : date
  period_start : date
}
class "BudgetLine" as pocketsage.models.budget.BudgetLine {
  budget : str
  budget_id : int
  category_id : int
  id : Optional[int]
  planned_amount : float
  rollover_enabled : bool
}
class "BudgetRepository" as pocketsage.services.budgeting.BudgetRepository {
  actual_spend() -> Iterable[tuple[int, float]]
  planned_amounts() -> Iterable[tuple[int, float]]
}
class "BudgetVariance" as pocketsage.services.budgeting.BudgetVariance {
  actual : float
  category_id : int
  delta : float
  planned : float
}
class "CSVImporter" as pocketsage.services.watcher.CSVImporter {
}
class "Category" as pocketsage.models.category.Category {
  category_type : str
  color : Optional[str]
  id : Optional[int]
  name : str
  slug : str
  transactions : List['Transaction']
}
class "ColumnMapping" as pocketsage.services.import_csv.ColumnMapping {
  account_id : str | None
  account_name : str | None
  amount : str
  category : str | None
  currency : str | None
  external_id : str | None
  memo : str | None
  occurred_at : str
}
class "DebtAccount" as pocketsage.services.debts.DebtAccount {
  apr : float
  balance : float
  id : int
  minimum_payment : float
}
class "DevConfig" as pocketsage.config.DevConfig {
  DEBUG : bool
  TESTING : bool
}
class "Habit" as pocketsage.models.habit.Habit {
  cadence : str
  description : str
  entries : List['HabitEntry']
  id : Optional[int]
  is_active : bool
  name : str
}
class "HabitEntry" as pocketsage.models.habit.HabitEntry {
  habit : str
  habit_id : int
  occurred_on : date
  value : int
}
class "HabitForm" as pocketsage.blueprints.habits.forms.HabitForm {
  cadence : str
  description : str
  name : str
  {abstract}validate() -> bool
}
class "HabitsRepository" as pocketsage.blueprints.habits.repository.HabitsRepository {
  create_habit() -> Habit
  list_habits() -> Iterable[Habit]
  record_entry() -> HabitEntry
}
class "Holding" as pocketsage.models.portfolio.Holding {
  account : Optional['Account']
  account_id : Optional[int]
  acquired_at : Optional[datetime]
  avg_price : float
  currency : str
  id : Optional[int]
  quantity : float
  symbol : str
}
class "Job" as pocketsage.services.jobs.Job {
  created_at : datetime
  error : Optional[str]
  finished_at : Optional[datetime]
  id : str
  metadata : Dict[str, Any]
  name : str
  started_at : Optional[datetime]
  status : str
  to_dict() -> Dict[str, Any]
}
class "LedgerEntryForm" as pocketsage.blueprints.ledger.forms.LedgerEntryForm {
  amount : float | None
  category_id : Optional[int]
  memo : str
  occurred_at : datetime | None
  {abstract}validate() -> bool
}
class "LedgerRepository" as pocketsage.blueprints.ledger.repository.LedgerRepository {
  create_transaction() -> Transaction
  list_transactions() -> Iterable[Transaction]
  update_transaction(transaction_id: int) -> Transaction
}
class "LiabilitiesRepository" as pocketsage.blueprints.liabilities.repository.LiabilitiesRepository {
  create_liability() -> Liability
  list_liabilities() -> Iterable[Liability]
  schedule_payoff() -> None
}
class "Liability" as pocketsage.models.liability.Liability {
  apr : float
  balance : float
  due_day : int
  id : Optional[int]
  minimum_payment : float
  name : str
  opened_on : Optional[date]
  payoff_strategy : str
}
class "LiabilityForm" as pocketsage.blueprints.liabilities.forms.LiabilityForm {
  apr : Decimal | None
  balance : Decimal | None
  minimum_payment : Decimal | None
  name : str
  {abstract}validate() -> bool
}
class "PortfolioImportForm" as pocketsage.blueprints.portfolio.forms.PortfolioImportForm {
  file_path : str
  validate() -> bool
}
class "PortfolioRepository" as pocketsage.blueprints.portfolio.repository.PortfolioRepository {
  allocation_summary() -> dict
  import_positions() -> int
  list_holdings() -> Iterable[dict]
}
class "ReportRenderer" as pocketsage.services.reports.ReportRenderer {
  render(figure: Figure) -> None
}
class "SqlModelPortfolioRepository" as pocketsage.blueprints.portfolio.repository.SqlModelPortfolioRepository {
  session
  allocation_summary() -> dict
  import_positions() -> int
  list_holdings()
}
class "Transaction" as pocketsage.models.transaction.Transaction {
  account : Optional['Account']
  account_id : Optional[int]
  amount : float
  category : Optional['Category']
  category_id : Optional[int]
  currency : str
  external_id : Optional[str]
  id : Optional[int]
  memo : str
  occurred_at : datetime
}
class "TransactionTagLink" as pocketsage.models.transaction.TransactionTagLink {
  tag_id : int
  transaction_id : int
}
class "_Handler" as pocketsage.services.watcher.start_watcher._Handler {
  importer
  on_created(event) -> None
}
pocketsage.config.DevConfig --|> pocketsage.config.BaseConfig
@enduml

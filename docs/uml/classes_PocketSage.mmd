classDiagram
  class Account {
    currency : str
    holdings : List['Holding']
    id : Optional[int]
    name : str
    transactions : List['Transaction']
  }
  class AmortizationWriter {
    write_schedule() None
  }
  class AppSetting {
    description : Optional[str]
    key : str
    value : str
  }
  class BaseConfig {
    APP_NAME : str
    DATABASE_URL : NoneType
    DATA_DIR : Path
    DB_FILENAME : str
    SECRET_KEY : NoneType
    SQLCIPHER_FLAG : str
    SQLCIPHER_KEY_ENV : str
    SQLITE_PRAGMAS : dict
    USE_SQLCIPHER : bool
    sqlalchemy_engine_options() dict[str, Any]
  }
  class Budget {
    id : Optional[int]
    label : str
    lines : List['BudgetLine']
    period_end : date
    period_start : date
  }
  class BudgetLine {
    budget : str
    budget_id : int
    category_id : int
    id : Optional[int]
    planned_amount : float
    rollover_enabled : bool
  }
  class BudgetRepository {
    actual_spend() Iterable[tuple[int, float]]
    planned_amounts() Iterable[tuple[int, float]]
  }
  class BudgetVariance {
    actual : float
    category_id : int
    delta : float
    planned : float
  }
  class CSVImporter {
  }
  class Category {
    category_type : str
    color : Optional[str]
    id : Optional[int]
    name : str
    slug : str
    transactions : List['Transaction']
  }
  class ColumnMapping {
    account_id : str | None
    account_name : str | None
    amount : str
    category : str | None
    currency : str | None
    external_id : str | None
    memo : str | None
    occurred_at : str
  }
  class DebtAccount {
    apr : float
    balance : float
    id : int
    minimum_payment : float
  }
  class DevConfig {
    DEBUG : bool
    TESTING : bool
  }
  class Habit {
    cadence : str
    description : str
    entries : List['HabitEntry']
    id : Optional[int]
    is_active : bool
    name : str
  }
  class HabitEntry {
    habit : str
    habit_id : int
    occurred_on : date
    value : int
  }
  class HabitForm {
    cadence : str
    description : str
    name : str
    validate()* bool
  }
  class HabitsRepository {
    create_habit() Habit
    list_habits() Iterable[Habit]
    record_entry() HabitEntry
  }
  class Holding {
    account : Optional['Account']
    account_id : Optional[int]
    acquired_at : Optional[datetime]
    avg_price : float
    currency : str
    id : Optional[int]
    quantity : float
    symbol : str
  }
  class Job {
    created_at : datetime
    error : Optional[str]
    finished_at : Optional[datetime]
    id : str
    metadata : Dict[str, Any]
    name : str
    started_at : Optional[datetime]
    status : str
    to_dict() Dict[str, Any]
  }
  class LedgerEntryForm {
    amount : float | None
    category_id : Optional[int]
    memo : str
    occurred_at : datetime | None
    validate()* bool
  }
  class LedgerRepository {
    create_transaction() Transaction
    list_transactions() Iterable[Transaction]
    update_transaction(transaction_id: int) Transaction
  }
  class LiabilitiesRepository {
    create_liability() Liability
    list_liabilities() Iterable[Liability]
    schedule_payoff() None
  }
  class Liability {
    apr : float
    balance : float
    due_day : int
    id : Optional[int]
    minimum_payment : float
    name : str
    opened_on : Optional[date]
    payoff_strategy : str
  }
  class LiabilityForm {
    apr : Decimal | None
    balance : Decimal | None
    minimum_payment : Decimal | None
    name : str
    validate()* bool
  }
  class PortfolioImportForm {
    file_path : str
    validate() bool
  }
  class PortfolioRepository {
    allocation_summary() dict
    import_positions() int
    list_holdings() Iterable[dict]
  }
  class ReportRenderer {
    render(figure: Figure) None
  }
  class SqlModelPortfolioRepository {
    session
    allocation_summary() dict
    import_positions() int
    list_holdings()
  }
  class Transaction {
    account : Optional['Account']
    account_id : Optional[int]
    amount : float
    category : Optional['Category']
    category_id : Optional[int]
    currency : str
    external_id : Optional[str]
    id : Optional[int]
    memo : str
    occurred_at : datetime
  }
  class TransactionTagLink {
    tag_id : int
    transaction_id : int
  }
  class _Handler {
    importer
    on_created(event) None
  }
  DevConfig --|> BaseConfig
